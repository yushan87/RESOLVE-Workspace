Concept Static_Array_Template(type Entry; evaluates Lower_Bound, Upper_Bound: Integer);
    uses Integer_Domain_Function_Theory;
    requires (Lower_Bound <= Upper_Bound);

    Definition Array_Is_Initial_in_Range (F: Z -> Entry, start, finish: Z): B = 
        for all i: Z, (start <= i and i <= finish) implies Entry.Is_Initial(F(i));
	
    Type Family Static_Array is modeled by (Z -> Entry);
        exemplar A;
        constraint true;
        initialization ensures Array_Is_Initial_in_Range(A, Lower_Bound, Upper_Bound);
        --initialization ensures Property_Holds(Entry,A,Lower_Bound,Upper_Bound,Entry.Is_Initial);
    end;

    Operation Swap_Entry(updates A: Static_Array; updates E: Entry; evaluates i: Integer); 
        requires Lower_Bound <= i and i <= Upper_Bound;
        ensures E = #A(i) 
        	and #E = A(i) 
        	and Eq_Except_On(#A,A,i);
			
    Operation Swap_Two_Entries(updates A: Static_Array; evaluates i, j: Integer); 
        requires Lower_Bound <= i  and i <= Upper_Bound and
                 Lower_Bound <= j  and j <= Upper_Bound;
        ensures #A(i) = A(j) 
        	and #A(j) = A(i)  
        	and Eq_Except_On(#A,A,i)
        	and Eq_Except_On(#A,A,j);     

    Operation Assign_Entry(updates A: Static_Array; evaluates Exp: Entry; evaluates i: Integer);
        requires Lower_Bound <= i  and i <= Upper_Bound;
		ensures A(i) = Exp and 
        	Eq_Except_On(#A,A,i);
        	
    Operation Entry_Replica(restores A: Static_Array; evaluates i: Integer): Entry;
        requires Lower_Bound <= i  and i <= Upper_Bound;
        ensures Entry_Replica = A(i);

end Static_Array_Template;